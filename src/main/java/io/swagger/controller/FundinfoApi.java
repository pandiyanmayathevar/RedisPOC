/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.controller;

import io.swagger.annotations.*;
import io.swagger.model.Fund;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-07T18:54:41.253Z")

@Api(value = "fundinfo", description = "the fundinfo API")
public interface FundinfoApi {

    @ApiOperation(value = "Add a new fund", nickname = "addfund", notes = "", tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid Id/Input"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/fundinfo/{Id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Fund> addfund(@ApiParam(value = "Fund object that needs to be added" ,required=true )@PathVariable("Id") Integer Id,  @Valid @RequestBody Fund body);


    @ApiOperation(value = "delete an existing fund", nickname = "deleteFund", notes = "", tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid Id/Input"),
        @ApiResponse(code = 404, message = "Fund not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/fundinfo/{Id}",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.DELETE)
    //ResponseEntity<Void> deleteFund(@ApiParam(value = "Fund object that needs to be deleted" ,required=true )  @Valid @RequestBody Fund body);
    ResponseEntity<Void> deleteFund(@ApiParam(value = "Id",required=true) @PathVariable("Id") Integer Id);

    @ApiOperation(value = "Returns fund details", nickname = "getFund", notes = "Returns fund details", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid Id/Input"),
            @ApiResponse(code = 404, message = "Fund not found"),
            @ApiResponse(code = 405, message = "Validation exception"),
            @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map") })
    @RequestMapping(value = "/fundinfo/{Id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Fund> getFund(@ApiParam(value = "Id",required=true) @PathVariable("Id") Integer Id);



    @ApiOperation(value = "delete all cache", nickname = "deleteCache", notes = "", tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map") })
    @RequestMapping(value = "/fundinfo/deletecache",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Void> deleteCache();



    @ApiOperation(value = "Update an existing fund", nickname = "updateFund", notes = "", tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid Id/Input"),
        @ApiResponse(code = 404, message = "Fund not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/fundinfo/{Id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Fund> updateFund(@ApiParam(value = "Fund object that needs to be added" ,required=true ) @PathVariable("Id") Integer Id, @Valid @RequestBody Fund body);


    //This EndPoint is created to update the Fund in Database without updating cache. This will be used in Functional Testing only
    @ApiOperation(value = "Update an existing fund - without updating Cache", nickname = "updateFundNoCache", notes = "", tags={ "fundinfo", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid Id/Input"),
            @ApiResponse(code = 404, message = "Fund not found"),
            @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/fundinfo/{Id}/nocache",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Fund> updateFundNoCache(@ApiParam(value = "Fund object that needs to be added" ,required=true ) @PathVariable("Id") Integer Id, @Valid @RequestBody Fund body);



}
